// Options for JavaCC.
options { LOOKAHEAD=1; FORCE_LA_CHECK=true; }

// Fonction principale
PARSER_BEGIN(Jagger)

import java.io.*;
public class Jagger
{
	public static Scope parent_scope;
    public static void main(String args[]) throws ParseException,FileNotFoundException
    {
		File initialFile = new File(args[0]);
    	InputStream stream = new FileInputStream(initialFile);
        Jagger parser = new Jagger(stream);
		parent_scope = new Scope();
        parser.mainloop();
    }
}
PARSER_END(Jagger)

// Characters to ignore.
SKIP: { " " | "\r" | "\t" | "\n" }

// Token specifications.
TOKEN:
{
    < NUMBER: (<DIGIT>)+ ("." (<DIGIT>)*)? >  // A decimal number.
|    <STRING: "\"" (~["\""])* "\"" >
|   < DIGIT: ["0"-"9"] >                      // A decimal digit.
//|   < EOL: "\n" >                             // End of line.
|	< PRINT: "print">						  // print keyword
|	< IF: "if">
|	< THEN: "then">
|	< ELSE: "else">
|   < LET: "let">
|   < IN: "in">
|   < END: "end">
| 	< ASSIGN: ":=">
|	< VAR: "var">
|   < WHILE: "while">
|   < FOR: "for">
|   < DO: "do">
|   < TO: "to">
|   < ID: ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9"])* >
}

// Main lopp: read expressions on a line until end of file.
//     mainloop â†’ (expression <EOL>)* <EOF>
void mainloop():
{ Expression a;}
{
    (
      a=scope() <EOF> {
		  				   System.out.println("============================================");
		  				   System.out.println("               Pretty Printer               ");
						   System.out.println("============================================");
						   
						   VisitorPrettyPrinter v = new VisitorPrettyPrinter(); a.accept(v); System.out.println();
		  				   System.out.println("============================================");
		  				   System.out.println("                  Binder                    ");
		  				   System.out.println("============================================");
						   
						   VisitorBinder v1 = new VisitorBinder(); a.accept(v1); System.out.println();
		  				   System.out.println("============================================");
		  				   System.out.println("                 Renamer                    ");
		  				   System.out.println("============================================");
						   
						   VisitorRenamer v4 = new VisitorRenamer(); a.accept(v4); System.out.println();
		  				   System.out.println("============================================");
		  				   System.out.println("               Type Checker                 ");
		  				   System.out.println("============================================");
		  				   
						   VisitorTypeChecker v3 = new VisitorTypeChecker(); a.accept(v3);
		  				   
						   System.out.println("============================================");
		  				   System.out.println("                Evaluation                  ");
		  				   System.out.println("============================================");
					       if(!v3.hasErrors()){
						   		VisitorEval v2 = new VisitorEval(); a.accept(v2);
						   }
						   
						}
    )*
    <EOF>
}

//Scope (axiom)
//Sc -> let 
//			(declarations)* 
//		in 
//			statement (,statement)* 
//		end
Expression scope():
{Expression e;Scope s = new Scope(); parent_scope=s;}
{
	<LET>
		(declaration())*
	<IN>
		e=statement(){s.addInstruction(e);} ("," e=statement(){s.addInstruction(e);})*
	<END>
	{return s;}

}

//Declaration (axiom)
//D -> var NAME := S
void declaration():
{Token t;Expression e;}
{
	
	<VAR> t=<ID> <ASSIGN> (e=conditional()|e=comparison() ){parent_scope.addDeclaration(t.toString(),new VarDecl(t.toString(),e));}
}


Expression forLoop():
{Expression c,e,start,end;Token t; 
//Needed to desugar
While w = new While();Scope s = new Scope(); parent_scope=s;}
{
	<FOR>
		t=<ID> <ASSIGN> start=statement() <TO> end=statement() {s.addDeclaration(t.toString(),new VarDecl(t.toString(),start));
																w.setCond(new BinOp(new Variable(t.toString()),BOp.LEQ,end));}
	<DO>
	(
	"(" e=statement(){w.addInstruction(e);} ("," e=statement(){w.addInstruction(e);})*")"
	| e=statement(){w.addInstruction(e);}
	)
	{w.addInstruction(new BinOp(new Variable(t.toString()),BOp.AFF,new BinOp(new Variable(t.toString()),BOp.PLUS,new Number(1))));
	s.addInstruction(w); return s;}

}
//While
// W -> <WHILE> C <DO> E(,E)*
Expression whileLoop():
{Expression c,e;While w = new While();}
{
	<WHILE>
		c=comparison(){System.out.println(c);w.setCond(c);}
	<DO>
	(
	"(" e=statement(){w.addInstruction(e);} ("," e=statement(){w.addInstruction(e);})*")"
	| e=statement(){w.addInstruction(e);}
	)
	{return w;}

}

//Assignment 
// A -> <ID> := S
Expression assignment():
{Token t;Expression e;}
{
	t=<ID> <ASSIGN> 
	(
      e=conditional()
	| e=comparison()
	){e=new BinOp(new Variable(t.toString()),BOp.AFF,e);}{return e;}


}

//statement (axiom)
//S -> P | C | E
Expression statement():
{Expression e;}
{
	(
	  e=print()
	| e=conditional()
	| e=assignment()
	| e=comparison()
	| e=whileLoop()
	| e=forLoop()
	| e=scope()
	){return e;}
}

//Conditional statement
// Cond -> 'if' C 'then' S 'else' S 
Expression conditional():
{Expression a,b,c;}
{
	<IF> (a=conditional()|a=comparison() ) <THEN> b=statement() <ELSE>	c=statement() ({a = new Condition(a,b,c);}){return a;}
}



//Print (axiom)
// P -> 'print(' C ')'
Expression print():
{Expression a;}
{
	<PRINT> "(" a=comparison() ")"({a = new KeywordFunction(Keywords.PRINT, a);}){return a;}
}


// Comparison (axiom)
// C -> E ('<'E | '<='E| '>'E | '>='E | '<>'E | '='E)
Expression comparison():
{Expression a,b;}
{
	a=expression()
	(
	  "<"  b=expression() {a = new BinOp(a,BOp.LT,b);}
	| "<=" b=expression() {a = new BinOp(a,BOp.LEQ,b);}
	| ">"  b=expression() {a = new BinOp(a,BOp.GT,b);}
	| ">=" b=expression() {a = new BinOp(a,BOp.GEQ,b);}
	| "<>" b=expression() {a = new BinOp(a,BOp.NEQ,b);}
	| "="  b=expression() {a = new BinOp(a,BOp.EQ,b);}
	)?{return a;}
}


// Expression (the axiom).
// E -> T ('+'T | '-'T)*
Expression expression():
{ Expression a,b;}
{
    a=term()
    (
      "+" b=expression() { a = new BinOp(a,BOp.PLUS,b); }
    | "-" b=expression() { a = new BinOp(a,BOp.MINUS,b); }
    )? { return a; }
}

// Term.
// T -> F ('*'F | '/'F)*
Expression term():
{ Expression a,b;}
{
    a=factor()
    (
      "*" b=factor() { a = new BinOp(a,BOp.MUL,b); }
    | "/" b=factor() { a = new BinOp(a,BOp.DIV,b); }
    )* { return a; }
}

// Factor of an expression.
// F -> <NUMBER> | <STRING> | "(" E ")"
Expression factor():
{ Token t; Expression e; }
{
	t= <ID> {return new Variable(t.toString());}
	|t= <NUMBER> { return new Number(Double.parseDouble(t.toString())); }
	|t= <STRING>  { return new Str(t.toString().substring(1,t.image.length()-1));}
    | "(" e=comparison() ")" { return e; }
}
