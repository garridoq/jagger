// Options for JavaCC.
options { LOOKAHEAD=1; FORCE_LA_CHECK=true; }

// Fonction principale
PARSER_BEGIN(Jagger)

import java.io.*;
public class Jagger
{
    public static void main(String args[]) throws ParseException,FileNotFoundException
    {
		File initialFile = new File(args[0]);
    	InputStream stream = new FileInputStream(initialFile);
        Jagger parser = new Jagger(stream);

        parser.mainloop();
    }
}
PARSER_END(Jagger)

// Characters to ignore.
SKIP: { " " | "\r" | "\t" }

// Token specifications.
TOKEN:
{
    < NUMBER: (<DIGIT>)+ ("." (<DIGIT>)*)? >  // A decimal number.
|    <STRING: "\"" (~["\""])* "\"" >
|   < DIGIT: ["0"-"9"] >                      // A decimal digit.
|   < EOL: "\n" >                             // End of line.
|	< PRINT: "print">						  // print keyword
|	< IF: "if">
|	< THEN: "then">
|	< ELSE: "else">
}

// Main lopp: read expressions on a line until end of file.
//     mainloop â†’ (expression <EOL>)* <EOF>
void mainloop():
{ Expression a;}
{
    (
      a=statement() <EOL> {
						   VisitorPrettyPrinter v = new VisitorPrettyPrinter(); a.accept(v); System.out.println();
		  				   VisitorTypeChecker v3 = new VisitorTypeChecker(); a.accept(v3);
					       if(!v3.hasErrors()){
						   		VisitorEval v2 = new VisitorEval(); a.accept(v2);v2.printEval();
							}
						}
    )*
    <EOF>
}

//statement (axiom)
//S -> P | C | E
Expression statement():
{Expression e;}
{
	(
	  e=print()
	| e=conditional()
	| e=comparison()
	){return e;}
}

//Conditional statement
// Cond -> 'if' C 'then' S 'else' S 
Expression conditional():
{Expression a,b,c;}
{
	<IF> a=statement() <THEN> b=statement() <ELSE>	c=statement() ({a = new Condition(a,b,c);}){return a;}
}



//Print (axiom)
// P -> 'print(' C ')'
Expression print():
{Expression a;}
{
	<PRINT> "(" a=comparison() ")"({a = new KeywordFunction(Keywords.PRINT, a);}){return a;}
}


// Comparison (axiom)
// C -> E ('<'E | '<='E| '>'E | '>='E | '<>'E | '='E)
Expression comparison():
{Expression a,b;}
{
	a=expression()
	(
	  "<"  b=expression() {a = new BinOp(a,BOp.LT,b);}
	| "<=" b=expression() {a = new BinOp(a,BOp.LEQ,b);}
	| ">"  b=expression() {a = new BinOp(a,BOp.GT,b);}
	| ">=" b=expression() {a = new BinOp(a,BOp.GEQ,b);}
	| "<>" b=expression() {a = new BinOp(a,BOp.NEQ,b);}
	| "="  b=expression() {a = new BinOp(a,BOp.EQ,b);}
	)?{return a;}
}


// Expression (the axiom).
// E -> T ('+'T | '-'T)*
Expression expression():
{ Expression a,b;}
{
    a=term()
    (
      "+" b=expression() { a = new BinOp(a,BOp.PLUS,b); }
    | "-" b=expression() { a = new BinOp(a,BOp.MINUS,b); }
    )? { return a; }
}

// Term.
// T -> F ('*'F | '/'F)*
Expression term():
{ Expression a,b;}
{
    a=factor()
    (
      "*" b=factor() { a = new BinOp(a,BOp.MUL,b); }
    | "/" b=factor() { a = new BinOp(a,BOp.DIV,b); }
    )* { return a; }
}

// Factor of an expression.
// F -> <NUMBER> | <STRING> | "(" E ")"
Expression factor():
{ Token t; Expression e; }
{
	t= <NUMBER> { return new Number(Double.parseDouble(t.toString())); }
	|t= <STRING>  { return new Str(t.toString().substring(1,t.image.length()-1));}
    | "(" e=comparison() ")" { return e; }
}
